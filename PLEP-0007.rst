==============================================
PLEP-0007 â€“ A Next Generation Plasma Simulator
==============================================

+-------------------+---------------------------------------------+
| PLEP              | number                                      |
+===================+=============================================+
| author(s)         | Nicholas A. Murphy                          |
+-------------------+---------------------------------------------+
| contact email     | namurphy@cfa.harvard.edu                    |
+-------------------+---------------------------------------------+
| date created      | 2018-12-17                                  |
+-------------------+---------------------------------------------+
| date last revised | 2019-02-22                                  |
+-------------------+---------------------------------------------+
| type              | standard                                    |
+-------------------+---------------------------------------------+
| status            | discussion                                  |
+-------------------+---------------------------------------------+
| DOI               |                                             |
|                   |                                             |
+-------------------+---------------------------------------------+

Abstract
========

This document describes a proposed flexible plasma simulation
framework within the PlasmaPy ecosystem.  Most plasma simulation codes
solve a particular class of equations and use a specific numerical
method.  These codes usually lack interoperability with each other.
Changing to a different physical model or numerical method often
requires setting up the same problem in a different code with
different conventions for defining initial and boundary conditions.
By designing a boundary with a clear interface that separates the
problem setup from the physical model and numerical method, the same
problem setup can be used with different physical models and numerical
methods.  Such boundaries will enable the framework to include
different numerical methods and analysis modules with the same high
level user interface that can therefore be used largely
interchangeably.  The framework should include its own interchangeable
numerical methods for fluid, particle-in-cell, and hybrid simulations,
and also allow for existing open source codes to be called via
wrappers designed to this interface.  Output will be created in
standardized forms.  The framework should include general methods for
solution of systems of partial differential equations written in
conservative form that can be inputted by the user in strings that are
processed by the framework.  Code development will equally prioritize
readability, usability, reliability, maintainability, and performance.
User documentation will be aimed toward both students taking their
first course in plasma physics as well as experienced researchers.
The documentation will include advice to users on how best choose a
physical model and numerical method and describe potential pitfalls
for different types of simulations.


.. This proposal describes a plan for a modular plasma simulation
   framework within the PlasmaPy ecosystem. The framework will be
   written in Julia and also have a Python interface. The initial
   conditions and domain specification will be defined separately from
   the system of equations and numerical method. Consequently, the
   same problem setup can be used for different systems of equations
   and numerical methods. The users will be able to input the system
   of equations and boundary conditions in strings that will be
   interpreted by the framework. Tools to discretize the system of
   equations directly will be used when possible to maximize
   flexibility. The framework will be capable of performing fluid,
   kinetic, and hybrid simulations. The output will be provided in
   standardized forms.

Background
==========

Numerical simulation is a powerful research tool that allows us to
investigate plasma phenomena such as tokamak disruptions, solar
eruptions, geomagnetic storms, and accretion into black holes.
Numerical simulations can be used to understand experiments and act as
a bridge between laboratory, heliospheric, and astrophysical plasma
phenomena. The numerical techniques used to simulate plasmas are
sophisticated and continually advancing. It is essential that the
PlasmaPy ecosystem include flexible plasma simulation capabilities
that allow for high performance but without sacrificing usability.

Current status of plasma simulation software
--------------------------------------------

Before describing our proposal in detail, we should first describe the
current status of plasma simulation based largely on personal
experience.

* **Numerical methods for plasma simulations are highly advanced.**
  Plasma scientists have developed and implemented highly
  sophisticated numerical methods for simulating the behavior of
  laboratory, heliospheric, space, and astrophysical plasmas in a wide
  variety of different regimes.

* **Plasma simulation codes are usually written in low-level languages
  such as Fortran and C.** These compiled languages offer excellent
  performance, but code development is slower because these languages
  are not interactive and types must be declared.

* **Access to codes is commonly restricted in some way.** Plasma
  simulation codes are often not released under an open source
  license, especially for codes used to simulate burning plasmas.
  Often prospective users must sign a user agreement form that
  restricts modification and/or redistribution.

* **Codes often lack sufficient documentation.** Scientists are
  generally under high pressure to publish in order to get tenure, win
  grants, or get hired for their next job. Documentation then becomes
  a lower priority. When documentation is inadequate, it is often
  necessary to work closely with a core developer with limited time in
  order to set up or modify a problem.

* **Installing and compiling codes is often difficult and
  time-consuming.** When plasma codes depend on external libraries or
  include multiple languages, users must often change compiler flags
  or edit make files. This requirement can provide a significant
  barrier to entry for newcomers. Lack of documentation on how to
  install and compile code can exacerbate this problem.

* **Codes frequently lack unit testing and continuous integration
  testing frameworks.** These testing strategies help to improve the
  reliability of the code, track down bugs as soon as they appear, and
  greatly reduce the likelihood that new bugs will be introduced when
  the code is modified or maintained.

* **Code is often difficult to read and therefore maintain.** Codes
  commonly use highly abbreviated names that obfuscate the meanings of
  variables, functions, and classes. Often there are no or inadequate
  comments to describe the meanings of these objects.

* **Simulation output is rarely stored in a standardized form.** Few
  standards or specifications exist for the storage of plasma
  simulation output (with the exception of OpenPMD). When output is
  not kept in a standardized form, then different software is needed
  to access and analyze the results. The shortage of standardized
  formats makes it more difficult to develop general purpose analysis
  and plotting software.

* **Benchmarking algorithms or comparing physical models usually
  requires setting up the same problem for multiple codes.** Each code
  generally has unique conventions for defining initial conditions,
  boundary conditions, and the computational domain. The problem
  setup for one code cannot be easily transferred to another code.
  Typically the same case must be set up by an experienced user of
  each code. Often benchmarks require careful discussions to make
  sure that normalizations and boundary conditions are able to be
  matched, and different analysis software must often be used.

* **Reproducing plasma simulation results usually requires significant
  effort.** All source code and raw data must be available and usable
  in order for a computational result to be replicable. While the
  software packages used to perform simulations are often open source,
  the specific version of the software is rarely cited. The code used
  to set up a particular simulation and analyze its results is usually
  not cited or available for inspection or reuse.

* **Code bases often contain interdependencies.**  The code for the
  problem setup, physical model, and numerical method are often
  intertwined with each other.  

.. Dependency diagrams often look like "hairball" diagrams.

.. Often code is not broken up into separate functions.  Spaghetti code.

..  High-level code is often intermixed with low-level code.


Project Goals
=============

We propose to create an open source framework for plasma simulation
within the PlasmaPy ecosystem.  The goal of this framework is to
enable users to perform high quality simulations with the minimum
amount of effort and without requiring knowledge of the details of the
implementation.  Code design will prioritize usability, readability,
and maintainability.  Optimization of performance should not come at
the cost of decreased user-friendliness.  The functionality for
initial conditions, boundary conditions, physical model, and numerical
method should be separated from each other with abstract interfaces.
Users should be provided with the flexibility to switch to a different
physical model or different numerical method with minimal effort.
This framework should include fluid, particle-in-cell (PIC), and
hybrid simulation capabilities using a variety of well-described
numerical methods.

.. Minimize the amount of time, effort, and frustration to needed to
   reach scientific understanding.

Requirements
============

* Allow the same problem setup to be used for different systems of
  equations and numerical methods.

* Allow users to change the system of equations or numerical method in
  the middle of a simulation with minimal effort.

* Be able to use the same analysis techniques on 

* Stretch goals: 

Anticipated User Experience
===========================

A requirement of this package is to allow users to specify the problem
setup, physical model, and numerical method as independently as
possible. This separation of responsibilities is necessary to allow
users to straightforwardly switch between different systems of equations
and computational algorithms.

Defining the problem setup
--------------------------

Users will first instantiate a class or create a module that contains
all of the information needed to set up the physical problem, including:

* Coordinate system and dimensionality
* Physical domain
* Initial conditions
* Boundary conditions
* Time interval

The physical domain should be capable of being multiply connected or a
more complicated geometry (such as a stellarator).

The initial and boundary conditions will provide a list of the
dependent variables. The initial conditions should be able to be
specified by:

* Choosing a pre-defined standard setup
* Specifying functions for different fields (either as callable
  objects or string representations of the equations)
* Passing in arrays of values
* Using helper tools such as a Grad-Shafranov solver

The boundary conditions should be able to be specified by:

* Choosing pre-defined boundary conditions (e.g., periodic or no-slip
  conducting wall boundaries)
* Specifying functions or conditions that need to be met for different
  fields along different boundaries (either as callable objects or
  string representations of the equations)

Choosing the physical model
---------------------------

Users will choose between fluid, PIC, and hybrid simulations.

For simulations using the fluid approximation, users will either
specify the equations in strings that will be parsed or select
pre-defined systems of equations such as resistive MHD or Hall MHD.
Users will add source and sink terms as necessary and choose models
for dissipation coefficients.  

.. If the equations are in conservative form (including with sources and
   sinks), then more general numerical methods may be used.



Specifying the numerical method
-------------------------------

For simulations using the fluid approximation, users will choose
between different finite difference, finite volume, finite/spectral
element, and spectral methods.  If possible, the code for the
numerical method will be generated from the specified equations
(though this may require that the equations be specified in
conservative form).

If the users choose a PIC simulation, then they will choose the
particle pusher for the time advance.

At this point, users will specify the numerical input parameters.

.. Right now I am not certain how to deal with boundary conditions, and
   how we could treat them similarly for fluid and PIC simulations.
   If we have a problem setup for a fluid case that has Dirichlet BCs
   for density, then how do we transfer that to a PIC case?  Should we
   have BCs defined separately?  Or include them in the numerical method
   definition maybe?  Maybe we should have a way to convert a fluid
   simulation setup into a PIC simulation.

.. Users will next define the system of equations or physical model to be
   solved. It is at this point that users will choose the style of
   simulation (including but not limited to fluid, particle-in-cell, and
   hybrid approaches). The physical model will be checked to be consistent
   with the initial and boundary conditions.

.. Users define the physical model.
     Options for user input
      Pre-defined sets of equations with options to specify different
      coefficients (like resistive MHD with uniform, Spitzer, anomalous,
      or a user-defined function)
    List of strings containing the different equations
   If the equations are in conservative form (including with sources
    and sinks) then
   We can have pre-defined sets of equations
   We can have pre-defined sets of equations as a string (including
   unicode characters) following Dedalus approach
    This can be done best if numerical method can be automagically generated
    Julia allows us to pass functions around as arguments (A function
      can have a function as an argument, and a function can return a
      function)
   We can sometimes use pre-set equations (like resistive MHD, with
     uniform or temperature dependent or anomalous resistivity)
     Numerical method
     Post-processing
     Maybe we could create a function that automatically writes text that
       describes the numerical method and such.

Grid generation
---------------

.. More detail needed on grid generation.  Need to discuss mesh
   packing capabilities and how to generate complicated grids.  For
   finite element simulations, more information on the mapping will be
   necessary, but might not be worth discussing here.

Users will be able to generate the grid after the domain is specified
and the numerical method is chosen.

Performing the simulation
-------------------------

Users will have varying amounts of control over how the simulation is
performed.  If no special processing is required, then users would be
able to perform the simulation in a single command.

Development Principles
======================

Code development should take place using best practices for scientific
and object-oriented programming.  

 * **Optimize for both productivity and performance.** High
   performance should not come at the cost of decreased usability.

 * **Provide and maintain thorough documentation.** The documentation
   should be sufficient for a student beginning their first research
   project in plasma physics.

 * **Make installation simple.** Allow the framework to be quickly and
   reliably installed using one command with a package manager.  Users
   should not be required to manually install external libraries, edit
   make files, or run installation scripts.

.. * **Plan the program architecture in advance.** Separate the
   different aspects of the

 * **Define abstract interfaces between the objects that define the
   problem setup and numerical method.** 
   Program each side to the interface.


.. **Make the code as modular as possible.** Separate the initial
   conditions from the system of equations and the numerical method.

.. **Develop the overall architecture under the point of view that we
   have not decided on the numerical method or physical model yet.**

.. **Make the code as modular as possible.**

.. **Optimize for both productivity and performance.** Plasma
   simulation should be straightforward. Running plasma simulations
   should not require expertise into the details of the code. Code
   should be optimized for performance only after it works, and then
   only after it becomes apparent what the bottlenecks are.

.. **Prioritize usability, readability, and maintainability.** Code
   should be straightforward to install. The packages resulting from
   this project should all be installable by using Julia's built-in
   package manager.


.. **Prioritize documentation.** The documentation should be
   sufficient for a student taking their first plasma physics class to
   be able to use it without too much difficulty.

.. **Prioritize flexible numerical methods.** There are a number of
   numerical methods that have been developed for systems of equations
   written in conservative form.

.. **Minimize the amount of work and knowledge required by the end
   user.**

.. **Make it difficult for users to make silent mistakes.**

.. **Make it straightforward to perform convergence studies and to
   test solutions using different numerical methods.**

.. **Use the SOLID principles for software development.** 
     
     The *single responsibility principle*: There should never be more
     than one reason for a class to change.

     The *open-closed principle*: Software entities (classes, modules,
     functions, etc.) should be open for extension but closed for
     modification.

     The *Liskov substitution principle*: Objects in a program should
     be replaceable with instances of their subtypes without altering
     the correctness of that program.

     The *interface segregation principle*: Clients should not be
     forced to depend upon interfaces that they do not use.

     The *dependency inversion principle*: High level modules should
     not depend upon low level modules. Abstractions should not depend
     upon details. Details should depend upon abstractions.

Proposed Package Structure
==========================

.. Mathematical functions
     Basis functions that are not defined in other packages
   Physics coefficients
     Resistivities
     Transport coefficients
     Plasma parameters
   Built-in grid tools
     Methods for creating a grid
     Should be able to define:
       Finite difference grids (including staggered grids)
       Finite volume grids (including staggered grids)
       Finite element and spectral element grids
         Including for multiply defined geometries
     Ways to specify grids for FD and FV methods (incl. on staggered grids)
     Ways to specify grids


Choice of language
==================

Julia is a new high-level open source language that synthesizes the best
features of Fortran, C, Python, R, MATLAB, and Lisp for scientific
computing. Julia uses a just-in-time (JIT) compiler with type inference
and multiple dispatch to achieve performance comparable to C and
Fortran. Unlike C and Fortran, Julia can be run interactively and does
not require type declarations. These features greatly speed up code
development by allowing prototyping in the same language to be used for
performance runs. Julia natively supports parallelization, and has been
used to achieve petascale computing. **Julia proves that high
performance can be achieved with a dynamically typed interactive
language without sacrificing usability.**

Julia can call code from Fortran and C, and can act as a wrapper for
codes written in these compiled languages. The main drawback of this
approach is that the resulting code would be harder to maintain because
developers would need to know two or three languages. A potential
drawback is that problems can arise in practice when code in one
language is called from a different language. Global optimizations
might also not be possible when mixing more than one language (though
Julia may become capable of optimizations across language boundaries in
the future. If possible, the package itself should be written entirely
in Julia and depend only on packages that can be installed using Julia's
built-in package manager. Users shall *not* be required to compile or
install any external libraries or use any shell scripts.

The implementation shall be written entirely in Julia, and shall have
a Python interface in addition to a Julia interface. The interface
may either be included in the PlasmaPy core package or in an
affiliated package. The ``Plasma`` class should be able to handle the
output of simulations performed using this plasma simulation
framework.

Implementation Notes
====================

Boundary Conditions
-------------------

A goal of this effort is to make the setup of fluid, particle, and
hybrid simulations as similar as possible. Ideally, the same problem
setup object should be able to be used to initialize all of these
different types of simulations as similarly as possible. However, the
formulation of boundary conditions between fluid and PIC simulations can
be substantially different and potentially incompatible.

.. I'm not sure how to handle this yet, particularly because I do not
   know enough about boundary conditions for PIC simulations. -Nick

Abstract Interfaces
-------------------

`Abstract base classes
<https://docs.python.org/3.7/library/abc.html>`_ (ABCs) in Python
allow users to define what methods and attributes must be defined in a
subclass of that ABC. This functionality is used in PlasmaPy's
``Plasma`` class. An equivalent to ABCs has not yet been implemented
in Julia (see `Julia issue #6875 on GitHub
<https://github.com/JuliaLang/julia/issues/6975>`_). An alternative
to ABCs would be to create a macro that checks that a particular class
or class instance has all of the required methods.

Issues, Pull Requests, and Branches
===================================

Backward Compatibility
======================

Creation of this general purpose plasma simulator may necessitate
changes to base classes such as ``Plasma`` which are still under
development.

Alternatives
============

Julia is not the only language that could be used for this project.
The main alternatives are listed below. The most significant
disadvantages are shown in bold.

* **Fortran**, **C**, or **C++**
  - Advantages
    - Exceptional performance as compiled languages
    - Many plasma physicists have considerable knowledge and
      experience with these languages
    - Codes can be called from other languages like Python and Julia
  - Disadvantages
    - **Productivity is reduced because these languages are not
      interactive**
    - Code in these languages is often several times the length of
      equivalent code in Julia or Python
    - Continuous integration testing platforms such as Travis CI do
      not support direct testing of Fortran code
    - Experience with Fortran is less helpful for plasma physics
      students searching for jobs outside of research and academia
    - Limited metaprogramming capabilities

* **Python with NumPy**
  - Advantages
    - Very fast development
    - Useful for prototyping
    - No need to compile code
  - Disadvantage
    - **Slow performance as an interpreted language**
    - NumPy does not offer a sufficient speedup

* **Python with Cython**
  - Advantages
    - C code generated from Cython provides compiled speeds
    - Better usability for end users because they can interact with a
      Python interface
  - Disadvantages
    - Does not provide a whole-language solution
    - **Cython is difficult to work with and maintain**

* **Python with Numba**
  - Advantages
    - Uses a just-in-time compiler to get compiled speeds
    - Often decorating a function with ``numba.jit`` is enough to get
      compiled speeds
  - Disadvantages
    - Because Numba compiles one function at a time, it is unable to
      do global optimizations while compiling
    - Not currently well-suited for massively parallel computing
    - **Does not provide a full language solution to the performance
      vs. productivity conundrum**

* **LuaJIT**
  - Advantages
    - Uses a just-in-time compiler to get compiled speeds
    - Offers exceptional performance, including for graphical
      processing units (GPUs)
  - Disadvantages
    - **Less active community surrounding scientific LuaJIT**
    - Fewer scientific libraries written in LuaJIT

Decision Rationale
==================

This PLEP has not been decided upon yet.
